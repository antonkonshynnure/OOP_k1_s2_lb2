#include <iostream>
using namespace std;
class Transactions
{
private:
    double rs;//razmer summy
    double kv;//kod valuty
    double kpokd;//kurs po otnosheniyu k dollaru
    Transactions ToDollar();
public:
    //#
    //###
    //###### - _ Constructors _ - #######
    //###
    //#
    Transactions(double, double, double);
    Transactions(double, double);
    Transactions(double);
    Transactions();
    Transactions(Transactions&);
    //#
    //###
    //###### - _ Main methods _ - #######
    //###
    //#
    void Print() const;
    void Input();
    Transactions Add(Transactions);
    bool isEqual(Transactions) const;
    //#
    //###
    //###### - _ SetOrGetParametrs _ - #######
    //###
    //#
    void setrs(double);
    void setkv(double);
    void setkpokd(double);
    double getrs();
    double getkv();
    double getkpokd();
    
};
//###################################

//###### - _ Constructors _ - #######

//###################################
Transactions::Transactions(double d1, double d2, double d3)
{
    rs = d1;
    kv = d2;
    kpokd = d3;
}
Transactions::Transactions(double d1, double d2)
{
    rs = 0;
    kv = d1;
    kpokd = d2;
}
Transactions::Transactions(double d1)
{
    rs = d1;
    kv = 980;
    kpokd = 0.036;
}

Transactions::Transactions(){

    rs = 0;
    kv = 980;
    kpokd = 0.036;
}
Transactions::Transactions(Transactions& d)
{
    rs = d.rs;
    kv = d.kv;
    kpokd = d.kpokd;
}

//###################################

//###### - _ Main methods _ - #######

//###################################

void Transactions::Input()
{
    cin>>rs>>kv>>kpokd;
    if (kpokd<0)abort();
}


void Transactions::Print() const
{
    cout << rs << "\t" << kv << "\t" << kpokd << endl;
}


Transactions Transactions::Add(Transactions d2)
{
    Transactions d(rs, kv, kpokd);
    if(kv==d2.kv || kpokd==d2.kpokd)
    {
        d.rs += d2.rs;
        return d;
    }
    d.ToDollar();
    d2.ToDollar();
    d.rs += d2.rs;
    return d;
}


Transactions Transactions::ToDollar()
{
    Transactions d;
    d.kv=840;
    d.rs = rs * kpokd;
    d.kpokd = 1;
    return d;
}


bool Transactions::isEqual(Transactions d1) const
{
    if(kv==d1.kv || kpokd==d1.kpokd)
    {
        if (rs == d1.rs)return true;
        return false;
    }
    Transactions d(rs, kv, kpokd);
    d.ToDollar();
    d1.ToDollar();
    if (d.rs == d1.rs)return true;
    return false;
};


//########################################

//###### - _ SetOrGetParametrs _ - #######

//########################################


//SetOrGet kpokd

void Transactions::setkpokd(double kpokd)
{
this->kpokd = kpokd;
}
double Transactions::getkpokd()
{
return kpokd;
}

//SetOrGet kv

void Transactions::setkv(double kv)
{
this->kv = kv;
}
double Transactions::getkv()
{
return kv;
}

//SetOrGet rs

void Transactions::setrs(double rs)
{
this->rs = rs;
}
double Transactions::getrs()
{
return rs;
}


int main(){
    Transactions d1, d2(2), d3, d4(d1), d5(1, 7), d6(11, 312, 57);
    d1.Print();//print autofill parametrs
    d2.Print();//print 1 inputed inside to code and 2 autofill parametrs
    d5.Print();//print 2 inputed inside to code and 1 autofill parametrs
    d6.Print();//print 3 inputed inside to code parametrs
    d3.Input();//input parametrs
    d3.Print();//print inputed parametrs
    d4.Print();//print cloned parametrs
    d3=d1.Add(d2);//d3 = d2 added to d1
    d3.Print();//print summary
    cout<<d1.isEqual(d3);//if d1>d3 print(1) else => print(0)
}
